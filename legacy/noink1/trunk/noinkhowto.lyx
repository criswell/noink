#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 218
\textclass linuxdoc
\language english
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize 10
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title
\added_space_top vfill \added_space_bottom vfill 
Noink HOWTO
\layout Author

Sam Hart <hart@geekcomix.com>
\layout Date

10/18/00
\layout Abstract

Noink is a web-based content server with security and archival abilities.
 This document explains how to set up and use Noink to power a web-site.
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

Introduction
\layout Subsection

What's the motivation behind Noink? 
\layout Standard

Noink was spawned from a need (then again, what isn't?)
\layout Standard

I needed something to power my Geekcomix.com root web-site.
 The site had grown to a point where it needed regular maintenance for its
 upkeep, and I had gotten too busy (or too lazy, take your pick) to work
 on it daily.
 So I began to see the need for some server-side scripting going on behind
 the scenes (it's taken me a little while to arrive at this conclusion,
 since I have always been a minimalist with respect to web-design).
\layout Standard

So I began looking for server-side solutions to do a number of things:
\layout Itemize

Allow multiple persons help administer my site (without giving them FTP
 and telnet access).
\layout Itemize

Fairly automated daily routines (such as archival, updating and such).
\layout Itemize

Add forums (I always wanted a place where people could discuss my comic
 strips).
 
\layout Standard

I found the Slashdot-inspired forum/news system ZenToe and tried it out
 for a bit.
 ZenToe is very nice for what it was designed to do, however, my needs for
 my root Geekcomix site fell outside of what ZenToe was intended to do...
 so I eventually realized that I needed something else.
 Don't get me wrong, ZenToe is a very nice peice of software, and I currently
 use it for the news/article sections of my site...
 It just didn't do what I needed for my Geekcomix root.
\layout Standard

While ZenToe had a great deal of strength in its forums, I really didn't
 need anything that powerful for the simple forums I wanted for my comic
 strips.
 Additionally, ZenToe lacked the archival abilities I really needed.
\layout Standard

Rather than mucking up ZenToe's code to make it do what I wanted (which
 I actually did try to do, resulting in something that was tre' buggy) and
 move it out of its intended scope, I decided to come up with something
 on my own, which did exactly what I wanted.
 Noink is the result.
\layout Subsection

What is Noink? (nutshell version) 
\layout Standard

Noink is a server-side CGI written in Perl and utilizing Linux specific
 commands and options which can be used as a back-end for an image serving
 site.
 
\layout Subsection

What is Noink? (detailed version) 
\layout Standard

During its construction, Noink has actually moved well beyond what its intended
 goal was.
 It now can act as a general information server (not just image server)
 which is customizable via psuedo-XML-looking (though not XML by any stretch
 of the imagination) *.noi files.
 It has simple forum features, can auto-archive itself, and allows for multiple
 sub-sites.
\layout Standard

Noink's *.noi files can be used to dynamically customize your site, and include
 many features.
 Among these are:
\layout Itemize

Including HTML/Text files (without the need for SSI).
\layout Itemize

Including "web-dumps" from sources external to the local server (essentially
 pulling the code from another site and serving it locally).
\layout Itemize

Inserting images (as was its intended use).
\layout Itemize

Accessing and configuring forums (allowing for multiple forums on one site).
\layout Itemize

Self-indexing (further inside a Noink data tree) as well as externally linking
 (or offsite linking without the need of extra code).
\layout Itemize

Data layout controlling.
\layout Itemize

File/Information ownership and access rights (more on this later).
 
\layout Standard

Additionally, Noink has a fairly secure user login procedure (even though
 the rest of it may or may not be secure depending upon installation ;)
 where plain-text passwords are only sent once per login session, and encrypted
 ones (using a digital "one-time-pad"-like encryption key) are sent for
 the remainder of the session.
\layout Standard

As mentionned, items in *.noi files can be assigned owners, group-ownerships
 and access rights in a model which takes after traditional *nix security.
 Doing this allows the administrator to completely and totally delegate
 the upkeep and other items of the site to other users or even entire groups
 of other users.
 Individual users (or groups of users) can be assigned as moderators and
 owners of a particular forum, whereas another forum (or image or whatever)
 is assigned another user or users.
 While not all of the access rights features have been implemented as of
 this version (most will not be folded in until the 2.x series), those that
 are in place can be used to greatly ease site administration.
 This can be combined with the previously mentionned encrypted password
 security model to fairly securely hide certain sections of your site from
 users who do not have appropriate access.
 (Which brings us to the applications.......) 
\layout Subsection

What can Noink be used for? 
\layout Standard

Noink is general enough that you should be able to use it for a wide variety
 of things (forum/news system not really being one of them...
 for that, use something like ZenToe or Slashes).
 Here's a small list of things I've thought of: 
\layout Itemize

Comic strip site back-end (it's intended purpose) 
\layout Itemize

Photo/Image galleries (such as online scrapbooks and such) 
\layout Itemize

Personal web-page back-end 
\layout Itemize

Information archiving/indexing system 
\layout Standard

Note that the second item was "Photo/Image galleries".
 With the security features and group affiliations in place, you could (though
 that honestly wasn't my intention ;) use Noink to power a Porn site.
 (Let everyone get an account, but only assign those paying customers appropriat
e group affiliations to access the pay content).
 This application is not one my wife approves of (heh-heh-heh) but it certainly
 could be used for that, and it is free-software (free as in freedom, not
 free beer) so you could use it for whatever you want!
\layout Subsection

How does one pronounce Noink? 
\layout Standard

Contrary to popular belief, it is not pronounced "no ink", as in "there
 is no ink"...
 It's pronounced "noink", as in the sound that a cartoon character might
 say when stealing something from another cartoon character....
 or as in the sound of a hammer striking a metal pipe with an adnoid problem.
\layout Standard

However, as with "Linux", "Java", and "GIF", I have never been one to argue
 pronunciation....
 so really, say it however you feel like saying it! 
\layout Subsection

What is Noink's Copyright?
\layout Standard

Noink and this manual are published under the Gnu General Public License
 (GPL).
 This license is as follows:
\layout Standard

\SpecialChar ~
 GNU GENERAL PUBLIC LICENSE Version 2, June 1991
\layout Standard

Copyright (C) 1989, 1991 Free Software Foundation, Inc.
 675 Mass Ave, Cambridge, MA 02139, USA Everyone is permitted to copy and
 distribute verbatim copies of this license document, but changing it is
 not allowed.
\layout Standard

Preamble
\layout Standard

The licenses for most software are designed to take away your freedom to
 share and change it.
 By contrast, the GNU General Public License is intended to guarantee your
 freedom to share and change free software--to make sure the software is
 free for all its users.
 This General Public License applies to most of the Free Software Foundation's
 software and to any other program whose authors commit to using it.
 (Some other Free Software Foundation software is covered by the GNU Library
 General Public License instead.) You can apply it to your programs, too.
\layout Standard

When we speak of free software, we are referring to freedom, not price.
 Our General Public Licenses are designed to make sure that you have the
 freedom to distribute copies of free software (and charge for this service
 if you wish), that you receive source code or can get it if you want it,
 that you can change the software or use pieces of it in new free programs;
 and that you know you can do these things.
\layout Standard

To protect your rights, we need to make restrictions that forbid anyone
 to deny you these rights or to ask you to surrender the rights.
 These restrictions translate to certain responsibilities for you if you
 distribute copies of the software, or if you modify it.
\layout Standard

For example, if you distribute copies of such a program, whether gratis
 or for a fee, you must give the recipients all the rights that you have.
 You must make sure that they, too, receive or can get the source code.
 And you must show them these terms so they know their rights.
\layout Standard

We protect your rights with two steps: (1) copyright the software, and (2)
 offer you this license which gives you legal permission to copy, distribute
 and/or modify the software.
\layout Standard

Also, for each author's protection and ours, we want to make certain that
 everyone understands that there is no warranty for this free software.
 If the software is modified by someone else and passed on, we want its
 recipients to know that what they have is not the original, so that any
 problems introduced by others will not reflect on the original authors'
 reputations.
\layout Standard

Finally, any free program is threatened constantly by software patents.
 We wish to avoid the danger that redistributors of a free program will
 individually obtain patent licenses, in effect making the program proprietary.
 To prevent this, we have made it clear that any patent must be licensed
 for everyone's free use or not licensed at all.
\layout Standard

The precise terms and conditions for copying, distribution and modification
 follow.
\layout Standard

GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION
 AND MODIFICATION
\layout Standard

0.
 This License applies to any program or other work which contains a notice
 placed by the copyright holder saying it may be distributed under the terms
 of this General Public License.
 The "Program", below, refers to any such program or work, and a "work based
 on the Program" means either the Program or any derivative work under copyright
 law: that is to say, a work containing the Program or a portion of it,
 either verbatim or with modifications and/or translated into another language.
 (Hereinafter, translation is included without limitation in the term "modificat
ion".) Each licensee is addressed as "you".
\layout Standard

Activities other than copying, distribution and modification are not covered
 by this License; they are outside its scope.
 The act of running the Program is not restricted, and the output from the
 Program is covered only if its contents constitute a work based on the
 Program (independent of having been made by running the Program).
 Whether that is true depends on what the Program does.
\layout Standard

1.
 You may copy and distribute verbatim copies of the Program's source code
 as you receive it, in any medium, provided that you conspicuously and appropria
tely publish on each copy an appropriate copyright notice and disclaimer
 of warranty; keep intact all the notices that refer to this License and
 to the absence of any warranty; and give any other recipients of the Program
 a copy of this License along with the Program.
\layout Standard

You may charge a fee for the physical act of transferring a copy, and you
 may at your option offer warranty protection in exchange for a fee.
\layout Standard

2.
 You may modify your copy or copies of the Program or any portion of it,
 thus forming a work based on the Program, and copy and distribute such
 modifications or work under the terms of Section 1 above, provided that
 you also meet all of these conditions:
\layout Standard

a) You must cause the modified files to carry prominent notices stating
 that you changed the files and the date of any change.
\layout Standard

b) You must cause any work that you distribute or publish, that in whole
 or in part contains or is derived from the Program or any part thereof,
 to be licensed as a whole at no charge to all third parties under the terms
 of this License.
\layout Standard

c) If the modified program normally reads commands interactively when run,
 you must cause it, when started running for such interactive use in the
 most ordinary way, to print or display an announcement including an appropriate
 copyright notice and a notice that there is no warranty (or else, saying
 that you provide a warranty) and that users may redistribute the program
 under these conditions, and telling the user how to view a copy of this
 License.
 (Exception: if the Program itself is interactive but does not normally
 print such an announcement, your work based on the Program is not required
 to print an announcement.)
\layout Standard

These requirements apply to the modified work as a whole.
 If identifiable sections of that work are not derived from the Program,
 and can be reasonably considered independent and separate works in themselves,
 then this License, and its terms, do not apply to those sections when you
 distribute them as separate works.
 But when you distribute the same sections as part of a whole which is a
 work based on the Program, the distribution of the whole must be on the
 terms of this License, whose permissions for other licensees extend to
 the entire whole, and thus to each and every part regardless of who wrote
 it.
\layout Standard

Thus, it is not the intent of this section to claim rights or contest your
 rights to work written entirely by you; rather, the intent is to exercise
 the right to control the distribution of derivative or collective works
 based on the Program.
\layout Standard

In addition, mere aggregation of another work not based on the Program with
 the Program (or with a work based on the Program) on a volume of a storage
 or distribution medium does not bring the other work under the scope of
 this License.
\layout Standard

3.
 You may copy and distribute the Program (or a work based on it, under Section
 2) in object code or executable form under the terms of Sections 1 and
 2 above provided that you also do one of the following:
\layout Standard

a) Accompany it with the complete corresponding machine-readable source
 code, which must be distributed under the terms of Sections 1 and 2 above
 on a medium customarily used for software interchange; or,
\layout Standard

b) Accompany it with a written offer, valid for at least three years, to
 give any third party, for a charge no more than your cost of physically
 performing source distribution, a complete machine-readable copy of the
 corresponding source code, to be distributed under the terms of Sections
 1 and 2 above on a medium customarily used for software interchange; or,
\layout Standard

c) Accompany it with the information you received as to the offer to distribute
 corresponding source code.
 (This alternative is allowed only for noncommercial distribution and only
 if you received the program in object code or executable form with such
 an offer, in accord with Subsection b above.)
\layout Standard

The source code for a work means the preferred form of the work for making
 modifications to it.
 For an executable work, complete source code means all the source code
 for all modules it contains, plus any associated interface definition files,
 plus the scripts used to control compilation and installation of the executable.
 However, as a special exception, the source code distributed need not include
 anything that is normally distributed (in either source or binary form)
 with the major components (compiler, kernel, and so on) of the operating
 system on which the executable runs, unless that component itself accompanies
 the executable.
\layout Standard

If distribution of executable or object code is made by offering access
 to copy from a designated place, then offering equivalent access to copy
 the source code from the same place counts as distribution of the source
 code, even though third parties are not compelled to copy the source along
 with the object code.
\layout Standard

4.
 You may not copy, modify, sublicense, or distribute the Program except
 as expressly provided under this License.
 Any attempt otherwise to copy, modify, sublicense or distribute the Program
 is void, and will automatically terminate your rights under this License.
 However, parties who have received copies, or rights, from you under this
 License will not have their licenses terminated so long as such parties
 remain in full compliance.
\layout Standard

5.
 You are not required to accept this License, since you have not signed
 it.
 However, nothing else grants you permission to modify or distribute the
 Program or its derivative works.
 These actions are prohibited by law if you do not accept this License.
 Therefore, by modifying or distributing the Program (or any work based
 on the Program), you indicate your acceptance of this License to do so,
 and all its terms and conditions for copying, distributing or modifying
 the Program or works based on it.
\layout Standard

6.
 Each time you redistribute the Program (or any work based on the Program),
 the recipient automatically receives a license from the original licensor
 to copy, distribute or modify the Program subject to these terms and conditions.
 You may not impose any further restrictions on the recipients' exercise
 of the rights granted herein.
 You are not responsible for enforcing compliance by third parties to this
 License.
\layout Standard

7.
 If, as a consequence of a court judgment or allegation of patent infringement
 or for any other reason (not limited to patent issues), conditions are
 imposed on you (whether by court order, agreement or otherwise) that contradict
 the conditions of this License, they do not excuse you from the conditions
 of this License.
 If you cannot distribute so as to satisfy simultaneously your obligations
 under this License and any other pertinent obligations, then as a consequence
 you may not distribute the Program at all.
 For example, if a patent license would not permit royalty-free redistribution
 of the Program by all those who receive copies directly or indirectly through
 you, then the only way you could satisfy both it and this License would
 be to refrain entirely from distribution of the Program.
\layout Standard

If any portion of this section is held invalid or unenforceable under any
 particular circumstance, the balance of the section is intended to apply
 and the section as a whole is intended to apply in other circumstances.
\layout Standard

It is not the purpose of this section to induce you to infringe any patents
 or other property right claims or to contest validity of any such claims;
 this section has the sole purpose of protecting the integrity of the free
 software distribution system, which is implemented by public license practices.
 Many people have made generous contributions to the wide range of software
 distributed through that system in reliance on consistent application of
 that system; it is up to the author/donor to decide if he or she is willing
 to distribute software through any other system and a licensee cannot impose
 that choice.
\layout Standard

This section is intended to make thoroughly clear what is believed to be
 a consequence of the rest of this License.
\layout Standard

8.
 If the distribution and/or use of the Program is restricted in certain
 countries either by patents or by copyrighted interfaces, the original
 copyright holder who places the Program under this License may add an explicit
 geographical distribution limitation excluding those countries, so that
 distribution is permitted only in or among countries not thus excluded.
 In such case, this License incorporates the limitation as if written in
 the body of this License.
\layout Standard

9.
 The Free Software Foundation may publish revised and/or new versions of
 the General Public License from time to time.
 Such new versions will be similar in spirit to the present version, but
 may differ in detail to address new problems or concerns.
\layout Standard

Each version is given a distinguishing version number.
 If the Program specifies a version number of this License which applies
 to it and "any later version", you have the option of following the terms
 and conditions either of that version or of any later version published
 by the Free Software Foundation.
 If the Program does not specify a version number of this License, you may
 choose any version ever published by the Free Software Foundation.
\layout Standard

10.
 If you wish to incorporate parts of the Program into other free programs
 whose distribution conditions are different, write to the author to ask
 for permission.
 For software which is copyrighted by the Free Software Foundation, write
 to the Free Software Foundation; we sometimes make exceptions for this.
 Our decision will be guided by the two goals of preserving the free status
 of all derivatives of our free software and of promoting the sharing and
 reuse of software generally.
\layout Standard

NO WARRANTY
\layout Standard

11.
 BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR
 THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
 EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
 PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
 EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH
 YOU.
 SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
 SERVICING, REPAIR OR CORRECTION.
\layout Standard

12.
 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL
 ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE
 THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING
 ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF
 THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
 OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
 THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
 EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY
 OF SUCH DAMAGES.
\layout Standard

END OF TERMS AND CONDITIONS
\layout Section

Obtaining and Installing Noink
\layout Standard

The latest stable and developmental Noink releases can be obtained from
 the Noink homepage at
\layout SGML

<a href="http://www.geekcomix.com/noink/">http://www.geekcomix.com/noink/</a>
\layout Standard

It may also be obtained from the SourceForge Noink project page (see www.sourcefo
rge.net for more information).
 At SourceForge you can find not only the latest stable and developmental
 releases but the Noink CVS repository as well.
\layout Subsection

Installing Noink from Source
\layout Standard

When you unarchive the Noink source file (stable or developmental), you
 will find a cgi-bin/ directory.
 Inside this directory you will find the Noink files.
 Copy these to your CGI binary directory on your system (under Apache, this
 is typically a cgi-bin/ directory defined by httpd.conf).
\layout Standard

Noink is spread across a number of files.
 Briefly, those files are:
\layout Itemize

noink.cgi: The main Noink program file.
 This is what is called from the web.
\layout Itemize

nolib.pm: The Noink General Library file.
 This Perl Module contains the basic libraries used in Noink.
\layout Itemize

noadmin.pm: The Noink Administration Library.
 This module contains all of the system administration utilities and interfaces.
\layout Itemize

noforum.pm: The Noink Forum Library.
 This module contains the forum function library for Noink.
\layout Itemize

noarchive.pm: The Noink Archive Library.
 This module contains the functions dealing with site archival and auto-indexing
 of archives.
\layout Itemize

nobanner.pm: The Noink Banner Library.
 This module contains the functions pertaining to Noink's handling of banners.
\layout Itemize

nocopyrite.pm: The Noink Copyright Library.
 This module deals with the maintainence of copyright information on your
 site.
\layout Itemize

novariables.pm: The Noink System Variables.
 System variables which should not be monkeyed with unless the user knows
 what they are doing! (One example would be if someone were wanting to internati
onalize.
 Another would be if they had extra security concerns over the system commands
 or form options used.)
\layout Itemize

noconf.pm: The Noink Configuration File.
 This is the file that the user must modify in order to set Noink up on
 their system.
\layout Standard

Noink is not ready to run straight out of its archive.
 You must first configure it and setup your web-site.
\layout Section

Configuration and Setup
\layout Standard

Before we get too far into the configuration of Noink and how to setup your
 web-site based upon Noink, we should really go into the philosphies behind
 Noink to prepare you for the way Noink works.
\layout Subsection

Noink's Philosophy
\layout Standard

Noink is not an end-all server-side suite of scripts to power any and all
 web-sites you would want to create.
 While it is general enough that it could run many different types of sites
 (even on the same server) it really should not be thought of as 
\begin_inset Quotes eld
\end_inset 

all-purpose
\begin_inset Quotes erd
\end_inset 

.
\layout Standard

Noink was created as a back-end for a comic strip web-site.
 While it has functionality beyond that purpose, it is still limitted in
 what it can do by this base goal.
 Noink was not intended to be (and will likely never evolve into, unless
 there's a fork ;) a news/forum site.
 It does have some basic forum features, but will always lack the robustness
 of software more dedicated to that purpose.
 It is not intended to be a quick and easy web-based 
\begin_inset Quotes eld
\end_inset 

photo-gallery
\begin_inset Quotes erd
\end_inset 

 for someone simply wanting to place photo's from their summer-trip online.
 It is not intended to remove the system administrator or web-designer from
 all HTML code, or even from having to create markup-like index pages for
 each and every page within their site.
\layout Standard

Noink was intended to ease the creation of fairly dynamic content driven
 sites.
 It was also intended to give the administrator/web-designer certain tools
 and features which they can use to upkeep/create/archive their web-based
 work.
 In many respects it complicates the creation of web-sites.
 But the extra functionality it gives should be worth the effort.
\layout Standard

One of the problems I have with much of the existing content-driving server-side
 software presently available is that they are hard-coded to work with only
 one site at a time, and do not scale easily to allow for multiple sites
 to use them.
 If you had a web-site which had multiple sub-sites and wanted each to be
 ran by certain code, you would either need multiple installations of the
 same code (making upgrades a chore) or you would have to modify the code
 yourself to make it perform this way (often making a mini 
\begin_inset Quotes eld
\end_inset 

fork
\begin_inset Quotes erd
\end_inset 

 of the code that has moved out of the scope of the original software.) Because
 of this, Noink was designed from the ground-up with the goal of making
 it scalable enough to power multiple sites.
 Through its single configuration file you can add as many sites as you
 desire, each one potentially different from the others.
\layout Standard

Another one of Noinks goal was to give some of the functionality and features
 found in other server-side modules, but which web-designers may or may
 not have access to depending upon their hosting service.
 One example of this is SSI, or 
\begin_inset Quotes eld
\end_inset 

server-side include
\begin_inset Quotes erd
\end_inset 

.
 For three years I was hosted by a service that lacked this feature, inspite
 of having quite a few others.
 During that time my site grew to a point where the simple act of updating
 the copyrights on each of the pages was a major pain.
 If I would have had SSI, this sort of trivial upkeep would have been a
 snap.
\layout Standard

The last philisophical item behind Noink's inception is that of maintainence.
 Noink is intended to give a certain degree of illusion of regular maintenance
 for a limitted duration of time to your web-site in spite of the fact you
 haven't worked on it in a while.
 I am someone who is 
\emph on 
very 
\emph default 
busy and usually spread myself too thinly amongst all the projects I have
 passion about.
 Often my priorities lie with stablizing/expanding some code I am working
 on, or fixing something behind the scenes rather than communicating with
 the outside world.
 As a result, my web-sites tend to suffer from a lack of updates.
 Noink is intended to alleviate this somewhat by giving my sites a look
 of regular maintenance for a small time.
 This is not a perfect effect to be sure, but it can buy me valuable time
 for a day or two to finish some project I am working on.
\layout Subsection

Post-install Configuration (noconf.pm details)
\layout Standard

When you first copy the CGI files into yoru cgi-bin/ directory, you will
 have to modify the Noink Configuration FIle, noconf.pm, to suite your site
 and it's needs.
 We will now rigorously examine this file.
\layout Standard


\emph on 
(Please note, for most web-sites, there will need to be very little modified
 in this file.
 We will, however, go into gratuitous detail in order to cover all that
 you would need to know if you did need more extensive modifications.)
\layout Subsubsection

Root Site Declarations
\layout Standard

The first section you should encounter in this file will be the Root Site
 Declarations.
 This is simply an array which itemizes each site which this installation
 of Noink will manage,
\layout Code

@root_sites = (
\begin_inset Quotes eld
\end_inset 

default
\begin_inset Quotes erd
\end_inset 

);
\layout Standard

Noink comes preset to managing one site, which is called 
\begin_inset Quotes eld
\end_inset 

default
\begin_inset Quotes erd
\end_inset 

.
 If you will be using Noink to power only one site, then you do not need
 to modify this (unless you wish to call your site something other than
 
\begin_inset Quotes eld
\end_inset 

default
\begin_inset Quotes erd
\end_inset 

.)
\layout Standard

If Noink will be managing multiple sites, then you must itemize them here.
 All that is really necessary is that each site has its own unique and simple
 (single-word) name.
 Noink will use these declarations later on in order to determine which
 site it uses.
 I could have had you number these sites, but I felt that naming them will
 be more intuitive than numbering.
\layout Standard

Let's say that you had three sites that Noink was managing.
 The sites are called 
\begin_inset Quotes eld
\end_inset 

Bob's Site of Foo
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

Jane's Site of Bar
\begin_inset Quotes erd
\end_inset 

, and 
\begin_inset Quotes eld
\end_inset 

Ted's Site of Foonly
\begin_inset Quotes erd
\end_inset 

.
 You could easily differentiate between these sites by calling them 
\begin_inset Quotes eld
\end_inset 

foo
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

bar
\begin_inset Quotes erd
\end_inset 

, and 
\begin_inset Quotes eld
\end_inset 

foonly
\begin_inset Quotes erd
\end_inset 

, respectively.
 If you were to do that, then you could set the root sites array to:
\layout Code

@root_sites = (
\begin_inset Quotes eld
\end_inset 

foo
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

bar
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

foonly
\begin_inset Quotes erd
\end_inset 

);
\layout Standard

Note that we changed 
\begin_inset Quotes eld
\end_inset 

default
\begin_inset Quotes erd
\end_inset 

 to 
\begin_inset Quotes eld
\end_inset 

foo
\begin_inset Quotes erd
\end_inset 

.
 We could have easily left it as 
\begin_inset Quotes eld
\end_inset 

default
\begin_inset Quotes erd
\end_inset 

, but 
\begin_inset Quotes eld
\end_inset 

foo
\begin_inset Quotes erd
\end_inset 

 is much more informative to us which site it refers to.
\layout Standard

The first element of the array is the default site.
 This is the site Noink will run if it is not given a preference of which
 site to run (for example, if you simply run noink.cgi without any options
 it will use the default site.) This element does not have to be named 
\begin_inset Quotes eld
\end_inset 

default
\begin_inset Quotes erd
\end_inset 

, the first element will be used as default regardless of what it is named.
\layout Subsubsection

Sub-Site Specifics
\layout Standard

After the Root Site Declaration we go into the specifcs of each of the root
 sites (sub-sites).
 For each site managed by Noink, there must exist entries for each of the
 following:
\layout Subsubsection

Site Specifications
\layout Standard

Here we determine the settings for the colors, titles and descriptions,
 as well as the metatag items for each of the sites.
\layout Standard

The first few items we come to are fairly self explainitory:
\layout Code

$title{$root_sites[0]} = 
\begin_inset Quotes eld
\end_inset 

Some Name
\begin_inset Quotes erd
\end_inset 

; 
\layout Code

$URL{$root_sites[0]} = "http://www.geekcomix.com/noink/testa/"; 
\layout Code

$classification{$root_sites[0]} = "Noink Example";
\layout Code

$description{$root_sites[0]} = "Noink Example"; 
\layout Code

$keywords{$root_sites[0]} = "linux, perl, noink, cgi, images, content, gnu,
 free, software, web"; 
\layout Code

$rating{$root_sites[0]} = "none"; 
\layout Code

$copyright{$root_sites[0]} = "Copyright (c) 2000 Sam Hart"; 
\layout Code

$author{$root_sites[0]} = "Sam Hart"; 
\layout Code

$replyto{$root_sites[0]} = "hart
\backslash 
@geekcomix.com"; 
\layout Code

$language{$root_sites[0]} = "English";
\layout Standard

These are each items to be placed in the header of the resultant HTML code.
 Much are metatags which will be used by indexing spiders and search engines.
\layout Standard

Next we find the section separation definition:
\layout Code

$section_sep{$root_sites[0]} = "<br><hr size=2 width=
\backslash 
"100%
\backslash 
">";
\layout Standard

This will be used by Noink to seperate segments of your sites from one another.
 Chances are you will want to leave this alone, but you could easily use
 this to insert image seperations (or no seperations at all) between said
 segments.
\layout Standard

Next we will find the basic site color scheme (not including forums):
\layout Code

$RearColor{$root_sites[0]} = "5F9EA0"; 
\layout Code

$PlainText{$root_sites[0]} = "000000"; 
\layout Code

$Vlink{$root_sites[0]} = "8B0000"; 
\layout Code

$link{$root_sites[0]} = "8B008B"; 
\layout Code

$BGColor{$root_sites[0]} = "B0E2FF"; 
\layout Code

$HeadBGColor{$root_sites[0]} = "778899"; 
\layout Code

$AdminBGColor{$root_sites[0]} = "33CC00"; 
\layout Code

$AdminBGLight{$root_sites[0]} = "33CC88";
\layout Standard

$RearColor is the color that will be behind your web-site.
 Noink does what it does by creating a series of tables on top of a common
 background.
 $RearColor is the color of that background.
\layout Standard

$PlainText is the color of your plain text.
 Whatever you desire your plain (non-linking) text to be, you should set
 this to it.
\layout Standard

$Vlink and $link go hand in hand.
 $link is the link color for your site, whereas $Vlink is the color of all
 your visitted links.
\layout Standard

$BGColor is the background color of your site.
 It is the color placed on all of the non-administrative and non-forum tables
 in your site.
\layout Standard

$AdminBGColor and $AdminBGLight are for the administrative menus and tables
 in your site.
 The BGColor one is for all the main admin displays, whereas the BGLight
 one is supplimental, intended to be used to differentiate different parts
 of the administrative system.
\layout Standard

Next we come to several page size and width settings:
\layout Code

$main_width{$root_sites[0]} = "70%";
\layout Code

$topbar_w{$root_sites[0]} = "100%"; 
\layout Code

$topbar_border{$root_sites[0]} = "0"; 
\layout Code

$topbar_padding{$root_sites[0]} = "5"; 
\layout Code

$topbar_spacing{$root_sites[0]} = "5";
\layout Code

$logo_width{$root_sites[0]} = "40%";
\layout Code

$page_width{$root_sites[0]} = "100%"; 
\layout Code

$page_border{$root_sites[0]} = "0"; 
\layout Code

$page_padding{$root_sites[0]} = "4"; 
\layout Code

$page_spacing{$root_sites[0]} = "0";
\layout Code

$leftbar_w{$root_sites[0]} = "10%";
\layout Code

$loginbox_w{$root_sites[0]} = "25%";
\layout Standard

$main_witdh is the width of the main window (percentage of main window).
 $topbar_w is the witdh within the main window of the topbar (the topbar
 is where you can place the title or logo of the site).
 $topbar_border, $topbar_padding and $topbar_spacing deal with the border,
 padding and spacing of the table which holds the topbar.
 Similarily, $page_width, $page_border, $page_padding and $page_spacing
 deal with the width, border, padding, and spacing of the table which will
 contain the page.
 Finally, $leftbar_w and $loginbox_w deal with the width of the leftbar
 and login box respectively.
\layout Code

$min_password_size{$root_sites[0]} = 2;
\layout Code

$remindpassword_size{$root_sites[0]} = 5;
\layout Standard

$min_password_size gives the minimum size a user's password can be.
 This defaults fairly low, and I would strongly recommend setting this higher.
\layout Standard

$remindpassword_size is the size the randomly generated remind password
 will be.
 When the user forgets their password, they can choose to have a new random
 password mailed to them.
 This size determines the size of that random password.
\layout Subsubsection

Forum Specifics
\layout Standard

Next in the configuration file we encounter the settings for the forums
 on this sub-site.
\layout Code

$default_forum_depth{$root_sites[0]} = 3; 
\layout Code

$default_forum_perscreen{$root_sites[0]} = 5; 
\layout Code

$forum_max_inner{$root_sites[0]} = 5; 
\layout Code

$forum_maxlength{$root_sites[0]} = 100; #lines or newlines
\layout Code

$forum_header_BGColor{$root_sites[0]} = "0090FF"; 
\layout Code

$forum_post_BGColor{$root_sites[0]} = "AAFFFF";
\layout Code

$forum_reply_pre{$root_sites[0]} = "RE: ";
\layout Standard

$default_forum_depth determines how deep the forum libraries will check
 in each forum for post replies.
 It is defaulted to 3.
\layout Standard

$default_forum_perscreen determines how many posts will be displayed per
 screen before a 
\begin_inset Quotes eld
\end_inset 

More...
\begin_inset Quotes erd
\end_inset 

 link will be provied.
 Note that this only refers to main-posts, and not replies to these posts
 which may be displayed according to $default_forum_depth.
\layout Standard

$forum_max_inner works like $default_forum_perscreen, but deals with the
 number of reply posts it will display per post before giving a 
\begin_inset Quotes eld
\end_inset 

More...
\begin_inset Quotes erd
\end_inset 

 link.
\layout Standard

$forum_maxlength indicates the maximum length in lines or newlines of each
 forum post.
\layout Standard

$forum_header_BGColor and $forum_post_BGColor are the colors used as the
 background for both the forum main header and the forum post headers respective
ly.
\layout Standard

$forum_reply_pre is the text that will be inserted before the subject of
 each and every reply.
 Most people will simply leave this as 
\begin_inset Quotes eld
\end_inset 

RE: 
\begin_inset Quotes eld
\end_inset 

, but some may want something more exotic (like 
\begin_inset Quotes eld
\end_inset 

In Response to:
\begin_inset Quotes eld
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

With Regards to:
\begin_inset Quotes eld
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

Bite me bum:
\begin_inset Quotes eld
\end_inset 

) so I left it as an adjustable option.
\layout Subsubsection

Archive Specifics
\layout Standard

Next we find the specifics of the archiving system for this site.
\layout Code

$can_archive{$root_sites[0]} = $yes;
\layout Standard

$can_archive determines wether the system is archivable.
 If it is, then any administrator will be able to click on the archive link
 and archive the site.
 This should be set to either $yes or $no.
\layout Standard

Why do we want this option? Some sites do not need to be archived (no, 
\emph on 
really?
\emph default 
) and the option might be a distraction for the admins of such a site.
 Additionally, the admins may not want other admins to accidentally (or
 otherwise) archive the site (perhaps the site is a massive image site taking
 up a huge amount of space and there simply isn't enough space to archive
 it).
\layout Subsubsection

File Specifics
\layout Standard

In the next section, we determine where Noink is to look for its files,
 and whether it should use some or all of the files found there.
\layout Code

$leftbar_file{$root_sites[0]} = "/noink/testa/leftbar.html"; 
\layout Code

$rightbar_file{$root_sites[0]} = "/noink/testa/rightbar.html"; 
\layout Code

$topbar_file{$root_sites[0]}= "/noink/testa/topbar.html";
\layout Standard

Each site must have files which correspond to the HTML to be inserted at
 various locations on each page.
\layout Standard

At the top of the page we place the $topbar_file.
 This is usually the title or logo of the web-site, perhaps some linking
 information.
\layout Standard

On the left of the page we find the $leftbar_file.
 This is merely HTML inserted at the left of the page (just before the Noink
 generated content).
\layout Standard

To the right, and underneath the administration/login box, we have the $rightbar
_file.
 This file should typically not be for the title or logo of the web-site,
 or even crucial links since under circumstances where more room is needed
 for the content at the middle of the page, this bar (as well as the administrat
ion/login box) is the first to go.
\layout Standard

Note that these included HTML/text can themselves be used to include HTML
 and/or text from other sources (including off-site links).
 This feature will be discussed later when we cover HTML including.
\layout Code

$data_root{$root_sites[0]} = "/data/"; 
\layout Code

$admin_root{$root_sites[0]} = "/admin/"; 
\layout Code

$archive_root{$root_sites[0]} = "/testa/archives/";
\layout Standard

$data_root determines the root of the web-site's data.
 The web-sites data consists of *.noi files and other content (such as images,
 forums, and included HTML files).
 More on *.noi files later, but for now, just know that this option must
 be set to a local directory (which does exist) that Noink has access to
 for both reading and writing.
\layout Standard

$admin_root is where Noink will place all of its administrative files such
 as the password file, copyright notes, and encryption keys.
 This local directory must exist and must be readable and writable to Noink.
 It is highly recommended that this directory not be web-accessable, since
 the confidential files contained therein will be text.
\layout Standard

$archive_root is where Noink places the site archives when requested to
 do so.
 It must exist and be readable and writable by Noink.
 It also helps to have this directory web-accessable, since many of the
 files in your site will likely need that (hence, their archives will need
 that as well).
 If you do not wish your archives to be available online, then you do not
 need to do this.
\layout Code

$site_archive_root{$root_sites[0]} = "/noink/testa/archives/"; 
\layout Code

$site_root{$root_sites[0]} = "/noink/testa/data/";
\layout Standard

$site_archive_root and $site_root are where your archive and web-site data
 root are accessable from the web.
\layout Code

undef $ReadImage{$root_sites[0]};
\layout Code

#$RearImage{$root_sites[0]} = "/some/dir/image.img";
\layout Code

undef $BGImage{$root_sites[0]};
\layout Code

#$BGImage{$root_sites[0]} = "/some/dir/image.img"; 
\layout Standard

Next you will find a region dealing with the display of images behind your
 site and in the background of your site.
 If you want either an image behind or in the background then you should
 set $RearImage and $BGImage to point to where these files are located on
 your system.
 If you do not wish to have any background images in this fashion, then
 you should undefine (undef) both.
\layout Standard

Note that you can easily mix and match (it is not an absolute).
 You could have a $RearImage but not a $BGImage and visa-versa.
\layout Code

#undef $banner_file{$root_sites[0]}; # Uncomment if no banners on your site
 
\layout Code

$banner_file{$root_sites[0]} = "/www/univ/banner.html"; 
\layout Standard

If you use banners on your site and these banners are accessable from an
 HTML file, then you must set that HTML file to $banner_file.
 However, if you do not use banners, then you should undefine (undef) $banner_fi
le.
\layout Standard

Presently banners are handled through an included HTML file.
 In future versions of Noink, I would like to add the option of site-banner
 administration.
\layout Code

$copyrite_small{$root_sites[0]} = "/www/univ/copyrite_s.html"; 
\layout Code

$copyrite_large{$root_sites[0]} = "/www/univ/copyrite_l.html"; 
\layout Standard

If you include copyrights in your page, then you will want to set these
 two variables to your included copyright HTML files.
 The small file will be displayed at the bottom of each page, whereas the
 large file will be displayed in a page framed by the top and left bars
 of Noink when the small file is clicked upon from within a browser.
\layout Standard

As before, these HTML files can feature HTML and URL include (as detailed
 later).
\layout Subsubsection

Contact Specifics
\layout Standard

The next section deals with who the users should contact if they find any
 trouble with the site:
\layout Code

$mail_admin{$root_sites[0]} = "hart
\backslash 
@geekcomix.com";
\layout Standard

There really isn't much to say about this section, other than that it is
 important
\layout Subsubsection

Message Specifics
\layout Standard

Now we come to the largest section of each site declaration: the Message
 Specifics.
 This section is so massive because 
\emph on 
every
\emph default 
 message used in a Noink session is defined here.
 This may seem tedious, but it gives Noink the ability to manage sites in
 languages other than english.
\layout Standard

If your site will be in English, then a simple perusal of this section is
 all that is necessary (perhaps to remove certain site-dependant messages
 or to verify that the messages say what you want them to say.)
\layout Standard

I will not go over every message variable defined here, because many are
 self-explainitory.
 However, I will very briefly run through a list of those that might give
 you trouble.
\layout Standard


\series bold 
$msg_crack
\series default 
 is one you should be careful with.
 It's default message is 
\begin_inset Quotes eld
\end_inset 

You are a suspected cracker...
\begin_inset Quotes erd
\end_inset 

, which isn't all that nice! This message is displayed when certain extreme
 discrepancies turn up during a users session- discrepancies which would
 not turn up in a standard session but only when a user is trying to use
 Noink's well-known commands for malicious purposes.
 It is not a perfect system, however, so you may wish to soften this message.
\layout Standard


\series bold 
$msg_passremind_subject
\series default 
, 
\series bold 
$msg_passremind_head
\series default 
, and
\series bold 
 $msg_passremind_foot
\series default 
 deal with the e-mail message that is sent if the user forgets their password
 (and you allow them to request a random password be sent to them).
 $msg_passremind_subject will be the subject of the e-mail, $msg_passremind_head
 will be in the e-mail body itself just before the randomized password,
 and $msg_passremind_foot will be in the e-mail body after the radomized
 password.
\layout Standard


\series bold 
$msg_userupdate_success
\series default 
 is one of several annoyances in Noink (annoyances which serve a purpose
 and I am not willing, yet, to remove).
 Several messages in Noink are displayed when a particular action has completed
 successfully.
 These messages are displayed simply and not linked back to anywhere in
 particular in the Noink session.
 Thus, if you wish to take the user back somewhere, you must add the URL
 in the message.
 This is one of those messages.
 The reason the software works like this is because certain messages are
 displayed in numerous places, and many system administrators and web-designers
 have very definate ideas about where the user should be sent after them.
 So rather than try to decide upon one that would irk and irritate a great
 deal many potential users of Noink, I opted just to leave them the option
 in cases like this.
\layout Standard


\series bold 
$msg_forum_guest
\series default 
 is where you assign who the posts made by those who are 
\begin_inset Quotes eld
\end_inset 

guests
\begin_inset Quotes erd
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

others
\begin_inset Quotes erd
\end_inset 

 (non-logged in persons) say they were posted by.
 Slashdot uses 
\begin_inset Quotes eld
\end_inset 

Anonymous Coward
\begin_inset Quotes erd
\end_inset 

 for this (just to give you more of an idea where it is used.)
\layout Standard


\series bold 
$msg_pre_year
\series default 
 is displayed before the year in the archive's auto-indexes.
 If you select to use the archiving features of the site, when the site
 is archived Noink creates index files for the archive and breaks it down
 to Year->Month->Day.
 This message is displayed in the descriptive text before the year.
\layout Standard


\series bold 
$msg_post_year
\series default 
 is related to $msg_pre_year in that it is displayed after the year.
 As an example, if the year were 
\begin_inset Quotes eld
\end_inset 

2000
\begin_inset Quotes erd
\end_inset 

, and $msg_pre_year was 
\begin_inset Quotes eld
\end_inset 

Archives for the year
\begin_inset Quotes erd
\end_inset 

 and $msg_post_year was 
\begin_inset Quotes eld
\end_inset 

AD...
\begin_inset Quotes erd
\end_inset 

 the resultant message would be
\layout Verbatim

Archives for the year 2000 AD...
\layout Standard

Similarily, for the Month and Day index files, we have the variables 
\series bold 
$msg_pre_month, $msg_post_month, $msg_pre_day
\series default 
, and
\series bold 
 $msg_post_day.

\series default 
 These behave in the same fashion as above.
\layout Subsubsection

Personal Data Extras
\layout Standard

In the next section you can define extra data fields not covered by the
 password file.
\layout Standard

Noink's password file is intended to be very simple.
 It stores the username, the password, and the user's group affiliations.
 This done not only for simplicity, but for security (since it reduces the
 number of times the software must access the password file).
\layout Standard

However, many web designers want to have more information stored about their
 users.
 The problem is that they typically disagree what that information is.
 Rather than hard-coding a set of extra data types into the password file,
 or into another file, I wanted to allow for a certain degree of flexability
 from the code.
 This is done through the use of user definable extra fields to be used
 in data extra files.
\layout Code

$extras_used{$root_sites[0]} = 2;
\layout Standard

Before using the extra fields, you must first define how many fields you
 will be using.
 You do this by setting the $extas_used variable.
\layout Standard

Next you must set for each extra used a $msg_extra and a $type_extra.
 $msg_extra is the message the user will see describing what the field is.
 $type_extra is the type identifier to Noink of what the field is.
 $type_extra can be any one of the following:
\layout Itemize

$extra_link: Non-URL specified Link (such as intranet or same server link)
\layout Itemize

$extra_url: URL specified Link (such as hompage)
\layout Itemize

$extra_email: E-mail address (to be used in password remind)
\layout Itemize

$extra_image: An image (feature not yet implimented)
\layout Itemize

$extra_other: Some other field (Noink does nothing with it)
\layout Itemize

$extra_blank: A blank field (nearly the same as other, but will be diverging
 in upcoming versions.
\layout Standard

As an example, if we wanted two fields, one was for an e-mail address, and
 the other was for homepage URL, we code define:
\layout Verbatim

$msg_extra{$root_sites[0]}[1] = "E-mail address"; 
\layout Verbatim

$type_extra{$root_sites[0]}[1] = $extra_email; 
\layout Verbatim

$msg_extra{$root_sites[0]}[2] = "Home page URL"; 
\layout Verbatim

$type_extra{$root_sites[0]}[2] = $extra_url;
\layout Standard

Next we find the privacy policy page for your site.
 This is simple text/HTML which will be inserted into your site whenever
 the user is asked to give confidential information (such as e-mail addresses,
 web-sites, and other items).
 You can use it as I have by inserting an <a href> tag into the text pointing
 to some standard privacy policy page somewhere for your site:
\layout Code

privacy_policy{$root_sites[0]} = 
\layout Code

"Click <a href=
\backslash 
"http://www.mysite.com/privacy_policy.html
\backslash 
">here</a> 
\layout Code

for our privacy policy"; # Your privacy policy link
\layout Standard

The final segment of the Personal Data Extras section deals with whether
 you want the users to be able to have randomized passwords mailed to them
 if they forget their passwords.
\layout Standard

If you do not wish to allow the users on your site to have random passwords
 sent to them for reminders, undefine (undef) the $email_remind variable:
\layout Code

undef $email_remind{$root_sites[0]};
\layout Standard

If you do want to give this option, then you must set the $email_remind
 variable to the array index in the data extras for the e-mail address.
 In our example, we have set the first array element as the e-mail address,
 thus we would set:
\layout Code

$email_remind{$root_sites[0]} = 1;
\layout Subsubsection

Site Administration
\layout Standard

The final section for each sub-site deals with the administration of that
 site.
 This is essentially a catch-all for any last minute items which did not
 quite fit anywhere else.
\layout Standard

The first item is the default administrator password.
 When your site first comes up, Noink will try to load the password file.
 If the password file is not there (which it shouldn't be if this was the
 first time running the software) it will create a basic password file containin
g two accounts: the 
\begin_inset Quotes eld
\end_inset 

admin
\begin_inset Quotes erd
\end_inset 

 (administrator) account and the 
\begin_inset Quotes eld
\end_inset 

other
\begin_inset Quotes erd
\end_inset 

 (non-logged in user) account.
 It will assign to the 
\begin_inset Quotes eld
\end_inset 

admin
\begin_inset Quotes erd
\end_inset 

 account a default password specified by the variable $default_admin_passwd.
 You set that default here.
\layout Code

$default_admin_passwd{$root_sites[0]} = "admin";
\layout Standard

Next we must specify if users can add their own accounts.
\layout Standard

Depending upon your policy as a system administrator, you may or may not
 want any old user to create an account on the site.
 You may wish to create accounts for them thus limitting who gains access
 to your site.
\layout Standard

If you do not wish to allow users to create their own accounts, you must
 set $users_add_own_accounts to $no:
\layout Code

$users_add_own_accounts{$root_sites[0]} = $no;
\layout Standard

If not, then you must set this line to:
\layout Code

$users_add_own_accounts{$root_sites[0]} = $yes;
\layout Standard

Finally, we set the default group for non-logged in users.
 Chances are you will want to leave this set to its default of 
\begin_inset Quotes eld
\end_inset 

other
\begin_inset Quotes erd
\end_inset 

, but because there may exist a situation where it is preferred to set this
 to something else, I have left in the option to change it.
\layout Code

$default_group{$root_sites[0]} = "other";
\layout Standard

One bit of warning here...
 Setting this to 
\begin_inset Quotes eld
\end_inset 

admin
\begin_inset Quotes erd
\end_inset 

 is 
\emph on 
not
\emph default 
 advised! (I'll leave you to figure out why!)
\layout Subsubsection

Declarations independant of root sites
\layout Standard

This final section of the noconf.pm file are independent of what root site
 you are running.
 Here you will find things such as general site copyright files, the location
 of the CGI scripts, and various operating system dependent commands and
 features.
\layout Standard

$noink_cgi is the fully qualified URL to get to the noink.cgi script.
 It is crucial that this be set correctly (even though I could have used
 %ENV variables to determine this automatically, some people 
\emph on 
really 
\emph default 
like controlling this option- think http://slashdot.org/ as opposed to http://www.
slashdot.org/ and http://freshmeat.net/ as opposed to http://www.freshmeat.net.)
\layout Standard

$general_copyright is the location of the general copyright for your site.
 This could be used if your site was a general hosting service with multiple
 sub-copyrights for sub-sites, but an overall 
\begin_inset Quotes eld
\end_inset 

general
\begin_inset Quotes erd
\end_inset 

 copyright for the entire site.
\layout Standard

$blank_space is for whatever you wish to set as a blank space for insertting
 into HTML.
 I left this in because some people have politcal problems with using 
\begin_inset Quotes eld
\end_inset 

&nbsp;
\begin_inset Quotes erd
\end_inset 

, which is what I typically use.
\layout Standard

$mail_interface is the path and filename of your command-line mailing program,
 and $mail_subject, $mail_cc and $mail_to are the various options for selecting
 those mailing features.
 If you use a Unix variant, chances are you will not want to change this
 (unless its to change the path to your 
\begin_inset Quotes eld
\end_inset 

mail
\begin_inset Quotes erd
\end_inset 

 program).
\layout Standard

The date options variables all deal with various ways to present the date.
 The most important ones for Noink are the $date_archive_stamp and $date_archive
_index.
\layout Standard

$date_archive_stamp is the stamp that Noink will use to date it's archives.
 Whatever command you set here must include a lot of information (date,
 month, year, time) and must present the information in a single chunk (i.e.,
 with no spaces).
\layout Standard

$date_archive_index will give the datat stamp as seen by the user.
 Thus, while this should be deatailed as well, it should have more of an
 emphasis on human readability.
\layout Standard

$delete_rec_f should be whatever command allows you to delete files recursively
 and force the delete to occur (used when deleting forum threads and messages).
\layout Standard

$copy_rec_f should be whatever command allows you to copy files recursively
 and force the copy to proceed (used when archiving the site).
\layout Standard

Next we find a series of Lynx variables.
 Lynx is the text-based web-browser which we use to pull HTML code from
 other web-sites.
 It must be installed on your system in order for you to use this feature.
\layout Standard

$pre_lynx is whatever commands which should be executed before the 
\begin_inset Quotes eld
\end_inset 

lynx
\begin_inset Quotes erd
\end_inset 

 command (this is set to
\layout Verbatim

$pre_lynx = "TERM=
\backslash 
"xterm
\backslash 
"
\backslash 
n";
\layout Standard

by default because on many Unix variants, Lynx will not run unless the terminal
 emulation is set!)
\layout Standard

$lynx is the full path and filename of lynx.
\layout Standard

$lynx_options gives the options passed to lynx to obtain a source code dump
 from whatever web-site is requested.
\layout Standard

Finally, we get to $ls which is what gives a simple, terse file listing
 (
\begin_inset Quotes eld
\end_inset 

ls
\begin_inset Quotes erd
\end_inset 

 command on Unixes), and $dir_sep which gives us the character used in directory
 separations (this is 
\begin_inset Quotes eld
\end_inset 

/
\begin_inset Quotes erd
\end_inset 

 on Unixes and 
\begin_inset Quotes eld
\end_inset 


\backslash 

\begin_inset Quotes erd
\end_inset 

 on Win32 machines).
\layout Section

Site-coding with NOI content files.
\layout Standard

Simply setting up and configuring Noink on your server will not result in
 a web-site.
 Noink was designed for a high degree of flexability in the content of the
 web-sites it manages.
 Thus, it must be told about the content it will be managing.
 This is handled through what are called 
\begin_inset Quotes eld
\end_inset 

NOI content files
\begin_inset Quotes erd
\end_inset 

 (or typically 
\begin_inset Quotes eld
\end_inset 

NOI files
\begin_inset Quotes erd
\end_inset 

).
\layout Subsection

What is a 
\begin_inset Quotes eld
\end_inset 

NOI content file
\begin_inset Quotes erd
\end_inset 

?
\layout Standard

A 
\begin_inset Quotes eld
\end_inset 

NOI content file
\begin_inset Quotes erd
\end_inset 

 is a file which uses a special markup-language to inform Noink of the content
 and hierchy of your site.
 These files are used to drive the core of your site.
 They can specify page contents, forum configurations, user and group ownerships
, and many other web content items.
\layout Standard

Each 
\begin_inset Quotes eld
\end_inset 

NOI file
\begin_inset Quotes erd
\end_inset 

 can consist of several sections.
 These sections can be any combination of 
\begin_inset Quotes eld
\end_inset 

headers
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

contents
\begin_inset Quotes erd
\end_inset 

.
 Truthfully, Noink treates 
\begin_inset Quotes eld
\end_inset 

headers
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

contents
\begin_inset Quotes erd
\end_inset 

 identically, the seperated terms are accounted for simply to assist the
 user in developing NOI contents.
\layout Standard

For a header section, we begin with the <head> tag.
 For a content section, we begin with the <content> tag.
 Both sections are then ended by taking the section tag and adding the <end>
 tag.
 Thus, for a file with one header section and one content section, the general
 structure would be something like this:
\layout Verbatim

<head>
\layout Verbatim

   ...some header things...
\layout Verbatim

<head><end>
\layout Verbatim

<content>
\layout Verbatim

   ...some content things...
\layout Verbatim

<content><end>
\layout Standard

In between the start and the end of each section could be any number of
 configuration items.
 These items can be grouped into three different classes: 
\begin_inset Quotes eld
\end_inset 

Section Specifics
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

Subsections
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

Forum Configurations
\begin_inset Quotes erd
\end_inset 

.
\layout Subsubsection


\begin_inset Quotes eld
\end_inset 

Section Specifics
\begin_inset Quotes erd
\end_inset 


\layout Standard

This class of NOI items deal with the configuration and settings for the
 particular section we are presently in.
 The first available option is the one dealing with columns.
\layout Standard

Each section is automatically set to a number of columns.
 This defaults to 3, but by using the columns tag, you can set this to any
 arbitrary number.
 Let's say you wanted 2 columns in the header section, you would use:
\layout Verbatim

<head>
\layout Verbatim

     <columns>=2
\layout Verbatim

     ...some header items...
\layout Verbatim

<head><end>
\layout Subsubsection


\begin_inset Quotes eld
\end_inset 

Subsections
\begin_inset Quotes erd
\end_inset 


\layout Standard

The purpose of having 
\begin_inset Quotes eld
\end_inset 

headers
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

contents
\begin_inset Quotes erd
\end_inset 

 is to allow coding of the dynamic content of your site.
 This is accomplished through the introduction of subsections to the main
 
\begin_inset Quotes eld
\end_inset 

header
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

content
\begin_inset Quotes erd
\end_inset 

 sections (hereafter termed 
\emph on 

\begin_inset Quotes eld
\end_inset 

main sections
\begin_inset Quotes erd
\end_inset 


\emph default 
).
 These subsections introduce the actual content of the main sections.
\layout Standard

The NOI file parser interprets NOI files as chunks of data:
\layout Verbatim

<head>
\layout Verbatim

    < chunk of data A >
\layout Verbatim

    < chunk of data A >
\layout Verbatim

    
\layout Verbatim

    < chunk of data B >
\layout Verbatim

    < chunk of data B >
\layout Verbatim

    
\layout Verbatim

    ....etc.....
\layout Verbatim

<head><end>
\layout Standard

These 
\begin_inset Quotes eld
\end_inset 

chunks
\begin_inset Quotes erd
\end_inset 

 are the subsections.
\layout Standard

A subsection begins with the <sub> designation.
 Each subsection must be assigned a unique single term (such as a one-word
 name or a number).
 You can have as many subsections within a main section as you want.
 Each subsection is ended either by the begining of the next subsection,
 or by the end of the present main section.
 For example, if we had a 
\begin_inset Quotes eld
\end_inset 

header
\begin_inset Quotes erd
\end_inset 

 main section, which had two columns and consisted of two subsections, 
\begin_inset Quotes eld
\end_inset 

A
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

B
\begin_inset Quotes erd
\end_inset 

, our NOI file would look something like this:
\layout Verbatim

<head>
\layout Verbatim

    <columns>=2
\layout Verbatim

    
\layout Verbatim

    <sub>=A
\layout Verbatim

    ...content items for sub-section A...
\layout Verbatim

    
\layout Verbatim

    <sub>=B
\layout Verbatim

    ...content items for sub-section B...
\layout Verbatim

<head><end>
\layout Standard

Every content item following the <sub> declaration, and before the next
 declaration will belong in that subsection.
\layout Standard

Noink places each subsection on the resultant web-site according to the
 <columns> specification.
 If you have <columns> set to 3, and you have six subsections, then you
 will have two rows of three subsections in your outputted HTML.
 If you have <columns> set to 1, and you have six subsections then the subsectio
ns will occupy six rows in only one column.
\layout Standard

This is all well and good, you might be thinking, but what about the actual
 
\begin_inset Quotes eld
\end_inset 

content
\begin_inset Quotes erd
\end_inset 

 which will drive the site? Well...
 I'm getting to that next!
\layout Standard

Inside these subsection declarations, you can have a number of different
 fields.
 You can typically mix and match these fields, but a few notable ones work
 best when combined with others.
\layout Standard

The most common subsection field is the <location> field.
 This field can serve two purposes: 1) it tells Noink where to look for
 any files which may be used in the rest of the content fields (such as
 images or included files), 2) it tells Noink where to proceed to if the
 browser selects and we have not told it otherwise.
\layout Standard

This <location> must be relative to the present location in the $data_root
 directory.
 It must also end with whatever the server's OS uses for a directory separator
 (for example, on Unix flavors, this is 
\begin_inset Quotes eld
\end_inset 

/
\begin_inset Quotes erd
\end_inset 

).
\layout Standard

Let's say that we are presently in the $data_root directory parsing a NOI
 file there.
 If there were a subdirectory $data_root/A/ which contained the content
 for the present subsection of the NOI file, and was also where we wished
 to be taken if the resultant HTML link is selected, then our NOI file might
 look like this:
\layout Verbatim

    <sub>=A
\layout Verbatim

    <location>=A/
\layout Verbatim

    ...other subsection A items...
\layout Standard

Noink will default to setting this location as its link (this will be a
 relative link handled by Noink and not an absolute path link).
 If this is not the desired result, then you should set the <nolink> flag:
\layout Verbatim

    <sub>=A
\layout Verbatim

    <location>=A/
\layout Verbatim

    <nolink>
\layout Verbatim

    ...other subsection A items...
\layout Standard

With <nolink> set, Noink will not set the <a href> directive in the resultant
 HTML code to cause a link to be made to this directory.
\layout Standard

Another quite common subsection field is <image>.
 This option goes along with Noink's original purpose (which was to power
 a comic strip web-site ;).
 The filename assigned to the image field must be relative to the set location
 field.
 Typically, you will want the image to be located inside the subdirectory
 pointed to by the <location> field, but you are not required to do so,
 and can use any arbitrarily long relative path that you wish which points
 Noink to the image (however, in our examples, we will assume that you do
 not wish to do this!).
\layout Standard

Adding to our continuing example, let's say that in the $data_root/A/ subdirecto
ry, you had an image called 
\begin_inset Quotes eld
\end_inset 

mypic.png
\begin_inset Quotes erd
\end_inset 

 which you wanted to have inside the subsection 
\begin_inset Quotes eld
\end_inset 

A
\begin_inset Quotes erd
\end_inset 

 content.
 Our subsection would thus look like this:
\layout Verbatim

    <sub>=A
\layout Verbatim

    <location>=A/
\layout Verbatim

    <image>=mypic.png
\layout Standard

Again, recall that this will default to the image 
\begin_inset Quotes eld
\end_inset 

mypic.png
\begin_inset Quotes erd
\end_inset 

 linking to the location $data_root/A/.
 If this is not what you want, use the <nolink> flag.
\layout Standard

The <name> field gives the name of the object.
 Depending upon what fields you use, <name> determines different things.
 If you have an <image> field set, then <name> will provide the text for
 the 
\begin_inset Quotes eld
\end_inset 

alt
\begin_inset Quotes erd
\end_inset 

 field of the image.
 If you do not have <image> set, then <name> will simply be the text printed
 in the HTML form in that field.
\layout Standard

Continuing our example, let's say that we wanted the 
\begin_inset Quotes eld
\end_inset 

mypic.png
\begin_inset Quotes erd
\end_inset 

 image to carry with it the alternative text name 
\begin_inset Quotes eld
\end_inset 

Picture from Summer Camp
\begin_inset Quotes erd
\end_inset 

.
 Our NOI file 
\begin_inset Quotes eld
\end_inset 

A
\begin_inset Quotes erd
\end_inset 

 subsection would then be
\layout Verbatim

    <sub>=A
\layout Verbatim

    <location>=A/
\layout Verbatim

    <image>=mypic.png
\layout Verbatim

    <name>=Picture from Summer Camp
\layout Standard

Notice that you do not need the quotes.
 Presently, you are not allowed to place 
\begin_inset Quotes eld
\end_inset 

=
\begin_inset Quotes erd
\end_inset 

 (or any other defined assignment character) inside your <name> assignment.
 In future versions of Noink this is a problem I hope to resolve.
\layout Standard

Related to <name> is <description>.
 This field gives descriptive text which will be printed within the subsection.
 Regardless of whether you use <image> or not, <description> will always
 be printed to the resulting HTML code.
 If the <image> is used, then the <description> will be centered underneath
 the image.
\layout Standard

If, in our example, we described the image as 
\begin_inset Quotes eld
\end_inset 

John and Sara eat poison ivy
\begin_inset Quotes erd
\end_inset 

 our NOI file 
\begin_inset Quotes eld
\end_inset 

A
\begin_inset Quotes erd
\end_inset 

 subsection would become:
\layout Verbatim

    <sub>=A
\layout Verbatim

    <location>=A/
\layout Verbatim

    <image>=mypic.png
\layout Verbatim

    <name>=Picture from Summer Camp
\layout Verbatim

    <description>=John and Sara eat poison ivy
\layout Standard

Note that you can insert any valid HTML tags within both <name> and <description
>.
 For example, if you did not wish the <description> to be centered (as is
 default) you can override that by enclosing your text by </center>....<center>,
 thus stopping and then resuming the HTML <center> tag.
\layout Standard

One of Noink's features is the ability to add forums as content.
 The original intent of this was to supply a simple forum feature for each
 of the comic strips hosted by Geekcomix.com.
 However, because of the abstract nature of the NOI files, you can assign
 forums to anything you desire (from images, to text, to include HTML from
 both on and off site).
\layout Standard

The <forum> field works very much like the <location> field, but cannot
 be overridden by <nolink>.
 By setting the <forum> field, you are telling Noink where it can find the
 forum for this subsection (this forum includes a NOI file as well as its
 own subdirectory tree).
 When Noink encounters a <forum> field, it will insert the $msg_forum text
 for that site and link to the forum.
\layout Standard

In our example, let's say that we had a forum for discussing this picture
 of John and Sara eating poison ivy, and this forum was in a subdirectory
 $data_root/Forum/.
 Our NOI file would be adjusted thusly:
\layout Verbatim

    <sub>=A
\layout Verbatim

    <location>=A/
\layout Verbatim

    <image>=mypic.png
\layout Verbatim

    <name>=Picture from Summer Camp
\layout Verbatim

    <description>=John and Sara eating poison ivy
\layout Verbatim

    <forum>=Forum/
\layout Standard

This must be a relative path just like <location>.
\layout Standard

Let's say now that we have a new subsection, 
\begin_inset Quotes eld
\end_inset 

joe
\begin_inset Quotes erd
\end_inset 

 which we wish to have an image in, but which we want to have linked to
 a specific URL (let's say we want it to link to a friend of our's site
 
\begin_inset Quotes eld
\end_inset 

http://www.joesite.com/
\begin_inset Quotes erd
\end_inset 

).
 To accomplish this, we use the <nolink> tag to first inform Noink not to
 automatically make a relative link.
 We next use the <link> field to inform Noink where the actual link will
 be.
 Taking the image to be 
\begin_inset Quotes eld
\end_inset 

joe.png
\begin_inset Quotes erd
\end_inset 

 located in the 
\begin_inset Quotes eld
\end_inset 

friends
\begin_inset Quotes erd
\end_inset 

 subdirectory, and the <name> and <description> to be 
\begin_inset Quotes eld
\end_inset 

Joe
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

Go to Joe's Site
\begin_inset Quotes erd
\end_inset 

, our subsection would be:
\layout Verbatim

    <sub>=joe
\layout Verbatim

    <location>=friends/
\layout Verbatim

    <image>=joe.png
\layout Verbatim

    <name>=Joe
\layout Verbatim

    <description>=Go to Joe's Site
\layout Verbatim

    <nolink>
\layout Verbatim

    <link>=http://www.joesite.com/
\layout Standard

<link> can be a fully qualified URL, or it can be a link to some directory
 on the local site.
\layout Standard

What if you wanted to insert an HTML file into the subsection? Noink has
 two fields which can deal with this, <include> and <url>.
\layout Standard

<include> works just like <image> except that it loads and includes a text/HTML
 file instead of an image.
 It works from the path relative to <location> (like <image>) and can be
 aribitrarily long (though, we will again assume that it is not!).
\layout Standard

Let's say that we have an HTML file called 
\begin_inset Quotes eld
\end_inset 

info.html
\begin_inset Quotes erd
\end_inset 

 located in $data_root/info/ which we want to have inserted into the current
 subsection.
 We also do not want this included HTML file to be linked (rather simply
 loaded and displayed).
 Our NOI file subsection would then look like:
\layout Verbatim

    <sub>=info
\layout Verbatim

    <location>=info/
\layout Verbatim

    <include>=info.html
\layout Verbatim

    <nolink>
\layout Standard

Note that this included file will be centered by default, thus measures
 must be taken in the included file similar to those described in <description>
 above if this is not a desired action.
\layout Standard

Also, with all included files, certain NOI file directives can be used inside
 the file.
 For example, if an <include> directive is used within an included HTML
 file, it will be parsed and interpreted accordingly (allowing for a certain
 degree of recursive inclusion).
 We will cover more on this later, but for now it is important to know of
 the option.
\layout Standard

<url> works the same as <include>, except it pulls in the included text/HTML
 from another web-site.
 If we had the same example as above, but the info.html file were located
 at 
\begin_inset Quotes eld
\end_inset 

http://www.otherplace.com/info/info.html
\begin_inset Quotes erd
\end_inset 

, our NOI file subsection would become:
\layout Verbatim

    <sub>=info
\layout Verbatim

    <url>=http://www.otherplace.com/info/info.html
\layout Verbatim

    <nolink>
\layout Standard

Notice that here we do not need the <location> field, as this is specific
 to the local site.
 Again, as with the <link> directive above, you can use fully qualified
 URLs or relative site directories with the <url> field.
 Also note that the <url> directive requires that you have 
\begin_inset Quotes eld
\end_inset 

lynx
\begin_inset Quotes erd
\end_inset 

 set up and working on your server.
\layout Standard

Noink also has the ability to assign ownership and access rights to each
 subsection.
 This can result in subsections and links which are hidden unless the user
 is qualified to see them.
 It will also be used in future versions of Noink to determine who can update
 particular subsections and who cannot.
\layout Standard

To assign a group and owner to a subsection, you use the <group> and <owner>
 fields.
 If we had a subsection which was owned by 
\begin_inset Quotes eld
\end_inset 

tom
\begin_inset Quotes erd
\end_inset 

 who was a member of the group 
\begin_inset Quotes eld
\end_inset 

webguys
\begin_inset Quotes erd
\end_inset 

, we could add the following:
\layout Verbatim

    <sub>=something
\layout Verbatim

    ...contents...
\layout Verbatim

    <owner>=tom
\layout Verbatim

    <group>=webguys
\layout Standard

Without permissions assigned, however, anyone can see the subsection.
\layout Standard

Using the <permissions> field, we can assign read and write permissions.
 This field is assigned by a string of 9 (nine) characters.
 The first two characters determine the ownership access.
 Then there is a 
\begin_inset Quotes eld
\end_inset 

-
\begin_inset Quotes eld
\end_inset 

 which separates the ownership access from the group access.
 The group access is determined by another two characters.
 Next comes another 
\begin_inset Quotes eld
\end_inset 

-
\begin_inset Quotes eld
\end_inset 

, and finally the other access.
\layout Standard

Each access field is determined by two characters, the first is 
\begin_inset Quotes eld
\end_inset 

r
\begin_inset Quotes erd
\end_inset 

 (read) the second is 
\begin_inset Quotes eld
\end_inset 

w
\begin_inset Quotes erd
\end_inset 

 (write).
 If you wish to set a field as read/writable, then you would set 
\begin_inset Quotes eld
\end_inset 

rw
\begin_inset Quotes erd
\end_inset 

.
 If, however, you only wanted it readable, then you would want to 
\begin_inset Quotes eld
\end_inset 

x
\begin_inset Quotes erd
\end_inset 

 (cancel) the write field, 
\begin_inset Quotes eld
\end_inset 

rx
\begin_inset Quotes erd
\end_inset 

.
\layout Standard

So for something that is read/writable to the owner, readable to the group,
 and not accessable to any others, you would set
\layout Verbatim

    <permissions>=rw-rx-xx
\layout Standard

The one group of users which have the ability to override this are the administr
ators or 
\begin_inset Quotes eld
\end_inset 

admin
\begin_inset Quotes erd
\end_inset 

's.
 Any member of the group 
\begin_inset Quotes eld
\end_inset 

admin
\begin_inset Quotes erd
\end_inset 

 can view (and will be able to update) any section of the site.
\layout Standard

One final NOI file directive which you should be aware of is the <NULL>
 directive.
 This directive will end any section or subsection, and can be thought of
 as a 
\begin_inset Quotes eld
\end_inset 

break
\begin_inset Quotes erd
\end_inset 

.
 It is largely used internally by Noink as a means of determining what state
 it is in inbetween sections and subsections.
\layout Subsubsection

Forum Configurations
\layout Standard

The last types of entry in a NOI file deal with forums.
\layout Standard

In a forum NOI file, you end the NOI file with the section <configuration>:
\layout Verbatim

<configuration>
\layout Verbatim

    ...configuration items...
\layout Verbatim

<configuration><end>
\layout Standard

Inside this forum configuration section, you can set certain forum specific
 fields, as well as use the <group>, <owner> and <permission> directives
 as detailed above.
\layout Standard

<no guest> is a tag for signifying that in a particular forum guest posts
 and replies are not allowed.
\layout Standard

<moderator> assigns the moderator e-mail address for the forum.
 If the moderator were 
\begin_inset Quotes eld
\end_inset 

paul@spline.com
\begin_inset Quotes erd
\end_inset 

, you would set
\layout Verbatim

    <moderator>=paul@spline.com
\layout Standard

Note that you should also set appropriate ownership since this is really
 not a valid assignment for such.
\layout Standard

<deep> sets how deep each post should go per screen.
 (This is like assigning a new $default_forum_depth for this particular
 forum).
 If you wanted the depth to be 6 for this forum, you would set
\layout Verbatim

    <deep>=6
\layout Standard

This directive overrides the $default_forum_depth variable for this forum.
\layout Standard

Finally, we have two additional settings which we will not cover now, as
 they are for features which will be found in the 2.x tree of Noink: <ascend>
 and <descend>.
 This will essentially be used for sorting and ordering the posts (by oldest
 to newest or newest to oldest).
\layout Subsection

Types of NOI files
\layout Standard

There are two types of NOI files which Noink will look for, index files
 and forum files.
\layout Subsubsection


\begin_inset Quotes eld
\end_inset 

index.noi
\begin_inset Quotes erd
\end_inset 

 files
\layout Standard


\begin_inset Quotes eld
\end_inset 

index.noi
\begin_inset Quotes erd
\end_inset 

 files are the files that Noink looks for in $data_root as well as each
 subdirectory of $data_root.
 These NOI files can contain any <head> or <content> items, but cannot contain
 Forum configuration items.
 These files are parsed to create the content of each page in the web-site.
\layout Subsubsection


\begin_inset Quotes eld
\end_inset 

forum.noi
\begin_inset Quotes erd
\end_inset 

 files
\layout Standard


\begin_inset Quotes eld
\end_inset 

forum.noi
\begin_inset Quotes erd
\end_inset 

 files are the files Noink will look for in specified forum directories
 (using the <forum> directive as specified above in an 
\begin_inset Quotes eld
\end_inset 

index.noi
\begin_inset Quotes erd
\end_inset 

 file).
 They too can contain <head> and <content> information, but must end with
 a <configuration> section for the configuration values of the forum.
\layout Section

Including Files
\layout Standard

As mentioned previously, files can be included into any subsection of a
 NOI file.
 These files can contain certain types of NOI file directives, as well as
 included file specific commands.
 These features of text/HTML inclusion is not exclusive to files included
 in NOI file subsections, but are actually universal in text/HTML inclusion
 (for example, these features also apply in the top, right and left bars
 defined in the noconf.pm file, as well as any banner or copyright file included
 elsewhere.)
\layout Subsection

NOI directives valid for included files
\layout Standard

You can include further files from within included text/HTML files by using
 the <include> directive.
 The <include> directive is used in the same way as before, except it must
 be on a line by itself in an included text/HTML file.
 Example:
\layout Verbatim

<font size=+1>This is an included HTML file</font>
\layout Verbatim

<br>It will now include another HTML file<br>
\layout Verbatim

<include>=/somedir/somefile.html
\layout Verbatim

<br>There, that wasn't so bad...<br>
\layout Standard

Additionally, you can use the <url> directive in the exact same fashion.
\layout Standard

Note that this does allow for a certain degree of recursive inclusion (as
 an included file can include itself).
 Noink defaults to allow files to be included 5 deep (this is the $max_recinc_de
ep variable set in novariable.pm) to prevent infinite loops.
\layout Subsection

Included file specific directives
\layout Standard

There are a few directives specific to included files (since they do not
 have any real use as directives in NOI files).
 They are used for inserting various date and time information into your
 HTML output.
\layout Standard

The first to cover is <year>.
 By placing <year> anywhere in an included text/HTML file you are telling
 Noink to replace <year> in that file with the present year.
 For example, if we used the following included HTML file:
\layout Verbatim

The current year is <year>.<br>
\layout Standard

Then Noink would parse the text as:
\layout Verbatim

The current year is 2000.<br>
\layout Standard

(provided the current year was 2000).
\layout Standard

Next come the directives <time> and <fulldate>.
 These two work identically to <year>, except they return either the current
 time, or the current full date (month, day, year, time) respectively.
\layout Standard

Finally, we have the <copyright-years> directive.
 This directive is handled the same as the others mentionned previously,
 except it first checks a file called 
\begin_inset Quotes eld
\end_inset 

COPYRIGHTS.dat
\begin_inset Quotes erd
\end_inset 

 in the $admin_root directory.
 If this file is empty or nonexistant, then it will insert the current year
 into the HTML output as well as start the 
\begin_inset Quotes eld
\end_inset 

COPYRIGHTS.dat
\begin_inset Quotes erd
\end_inset 

 file with the current year.
 If the file does exist and contains a list of years, Noink will insert
 the list of years, separated by commas, into the HTML output.
\layout Standard

In future versions of Noink, it will also check to see if the current year
 is contained in the 
\begin_inset Quotes eld
\end_inset 

COPYRIGHTS.dat
\begin_inset Quotes erd
\end_inset 

 file.
 If it is not, then it will insert it.
\layout Standard

The purpose of the <copyright-years> directive is to insert all the years
 you claim copyright on whatever it is your are claiming copyright to.
\layout Subsection

Included File Specific Toggles
\layout Standard

In addition to the directives listed previously, included files can accept
 a number of tags which act as toggle switches.
\layout Standard

<force space> is a toggle which tells Noink to either send forced spaces
 to the browser (eg.
 &nbsp;) or send standard spaces.
 Noink starts out with <force space> off, meaning that any spaces it encounters
 in included files will be sent as ordinary space characters.
 If, however, you wish for all the spaces to be interpretted as 
\begin_inset Quotes eld
\end_inset 

hard spaces
\begin_inset Quotes erd
\end_inset 

 (eg.
 &nbsp;) then this toggle allows that.
\layout Standard

Let's say we are including a file with some hard spaces:
\layout Verbatim

This is the file<br>
\layout Verbatim

   There were 3 spaces.<br>
\layout Verbatim

    There were 4 spaces.<br>
\layout Standard

and you wanted Noink to interpret the spaces on the second and third lines
 as hard spaces.
 You would place <force space> surrounding those lines:
\layout Verbatim

This is the file<br>
\layout Verbatim

<force space>
\layout Verbatim

   There were 3 spaces.<br>
\layout Verbatim

    There were 4 spaces.<br>
\layout Verbatim

<force space>
\layout Standard

This would result in the following HTML code:
\layout Verbatim

This is the file<br>
\layout Verbatim

&nbsp;&nbsp;&nbsp;There&nbsp;were&nbsp;3&nbsp;spaces.<br>
\layout Verbatim

&nbsp;&nbsp;&nbsp;&nbsp;There&nbsp;were&nbsp;4&nbsp;space.<br>
\layout Standard

Note that even the spaces inside the text were converted to hard spaces,
 not just the leading ones!
\layout Section

Advanced Configuration
\layout Standard

While
\layout Section

Noink Usage In Non-Noink Files
\layout Standard

Noink must interface with the outside world, not only through the end-user's
 browser but through the server.
 As a result, Noink can take a number of command line parameters which allow
 the server administrator to customize the end-user's browsing experience.
\layout Subsection

Accessing a Noink-powered site by site name
\layout Standard

Noink can power several sites per server, but will often be accessed via
 the same method.
 For example, if our domain was www.mysite.org and Noink was installed in
 the cgi-bin directory, every Noink instance would be accessed through the
 following basic URL:
\layout Verbatim

http://www.mysite.org/cgi-bin/noink.cgi
\layout Standard

If we had three sites on this server, called 
\begin_inset Quotes eld
\end_inset 

foo
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

bar
\begin_inset Quotes erd
\end_inset 

, and 
\begin_inset Quotes eld
\end_inset 

glurtch
\begin_inset Quotes erd
\end_inset 

, then we could access these sites respectively with:
\layout Verbatim

http://www.mysite.org/cgi-bin/noink.cgi?root=foo
\layout Verbatim

http://www.mysite.org/cgi-bin/noink.cgi?root=bar
\layout Verbatim

http://www.mysite.org/cgi-bin/noink.cgi?root=glurtch
\layout Standard

The 
\begin_inset Quotes eld
\end_inset 

root
\begin_inset Quotes erd
\end_inset 

 option sets the current root site.
\layout Subsection

Using your Noink site setup to frame a non-Noink page
\layout Standard

If you have an SHTML file which contains some information that you do not
 wish to have rendered by a NOI file, or even touched by the NOI file interprete
r, then you can include your installation of noink.cgi passing the 
\begin_inset Quotes eld
\end_inset 

root
\begin_inset Quotes erd
\end_inset 

 option specifying the root site (or no 
\begin_inset Quotes eld
\end_inset 

root
\begin_inset Quotes erd
\end_inset 

 option, specifying the default root site) and the 
\begin_inset Quotes eld
\end_inset 

pre
\begin_inset Quotes erd
\end_inset 

 command (via the 
\begin_inset Quotes eld
\end_inset 

cmd
\begin_inset Quotes erd
\end_inset 

 option).
\layout Standard

Let's say that you wish to do this with the 
\begin_inset Quotes eld
\end_inset 

foo
\begin_inset Quotes erd
\end_inset 

 site theme as defined in the previous subsection.
 In that case, you would use the URL (minus domain name in this case):
\layout Verbatim

/cgi-bin/noink.cgi?root=foo&cmd=pre
\layout Standard

Note in this case that Noink leaves a few dangling <table> tags which you
 must clean up.
 Simply insertting 
\begin_inset Quotes eld
\end_inset 

</td></tr></table>
\begin_inset Quotes erd
\end_inset 

 at the end of your SHTML file will do the trick.
\layout Section

Example Noink Setup
\layout Standard

This will be where I will explain my examples...
 but not now.
 ;)
\the_end
